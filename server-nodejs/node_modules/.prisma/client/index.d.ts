
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Estado
 * 
 */
export type Estado = $Result.DefaultSelection<Prisma.$EstadoPayload>
/**
 * Model Cidade
 * 
 */
export type Cidade = $Result.DefaultSelection<Prisma.$CidadePayload>
/**
 * Model LocalColeta
 * 
 */
export type LocalColeta = $Result.DefaultSelection<Prisma.$LocalColetaPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Estados
 * const estados = await prisma.estado.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Estados
   * const estados = await prisma.estado.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.estado`: Exposes CRUD operations for the **Estado** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Estados
    * const estados = await prisma.estado.findMany()
    * ```
    */
  get estado(): Prisma.EstadoDelegate<ExtArgs>;

  /**
   * `prisma.cidade`: Exposes CRUD operations for the **Cidade** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cidades
    * const cidades = await prisma.cidade.findMany()
    * ```
    */
  get cidade(): Prisma.CidadeDelegate<ExtArgs>;

  /**
   * `prisma.localColeta`: Exposes CRUD operations for the **LocalColeta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LocalColetas
    * const localColetas = await prisma.localColeta.findMany()
    * ```
    */
  get localColeta(): Prisma.LocalColetaDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.8.1
   * Query Engine version: 79fb5193cf0a8fdbef536e4b4a159cad677ab1b9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Estado: 'Estado',
    Cidade: 'Cidade',
    LocalColeta: 'LocalColeta'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'estado' | 'cidade' | 'localColeta'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Estado: {
        payload: Prisma.$EstadoPayload<ExtArgs>
        fields: Prisma.EstadoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EstadoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EstadoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          findFirst: {
            args: Prisma.EstadoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EstadoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          findMany: {
            args: Prisma.EstadoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>[]
          }
          create: {
            args: Prisma.EstadoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          delete: {
            args: Prisma.EstadoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          update: {
            args: Prisma.EstadoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          deleteMany: {
            args: Prisma.EstadoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EstadoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EstadoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          aggregate: {
            args: Prisma.EstadoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEstado>
          }
          groupBy: {
            args: Prisma.EstadoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EstadoGroupByOutputType>[]
          }
          count: {
            args: Prisma.EstadoCountArgs<ExtArgs>,
            result: $Utils.Optional<EstadoCountAggregateOutputType> | number
          }
        }
      }
      Cidade: {
        payload: Prisma.$CidadePayload<ExtArgs>
        fields: Prisma.CidadeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CidadeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CidadePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CidadeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CidadePayload>
          }
          findFirst: {
            args: Prisma.CidadeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CidadePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CidadeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CidadePayload>
          }
          findMany: {
            args: Prisma.CidadeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CidadePayload>[]
          }
          create: {
            args: Prisma.CidadeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CidadePayload>
          }
          delete: {
            args: Prisma.CidadeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CidadePayload>
          }
          update: {
            args: Prisma.CidadeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CidadePayload>
          }
          deleteMany: {
            args: Prisma.CidadeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CidadeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CidadeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CidadePayload>
          }
          aggregate: {
            args: Prisma.CidadeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCidade>
          }
          groupBy: {
            args: Prisma.CidadeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CidadeGroupByOutputType>[]
          }
          count: {
            args: Prisma.CidadeCountArgs<ExtArgs>,
            result: $Utils.Optional<CidadeCountAggregateOutputType> | number
          }
        }
      }
      LocalColeta: {
        payload: Prisma.$LocalColetaPayload<ExtArgs>
        fields: Prisma.LocalColetaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocalColetaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocalColetaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocalColetaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocalColetaPayload>
          }
          findFirst: {
            args: Prisma.LocalColetaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocalColetaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocalColetaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocalColetaPayload>
          }
          findMany: {
            args: Prisma.LocalColetaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocalColetaPayload>[]
          }
          create: {
            args: Prisma.LocalColetaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocalColetaPayload>
          }
          delete: {
            args: Prisma.LocalColetaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocalColetaPayload>
          }
          update: {
            args: Prisma.LocalColetaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocalColetaPayload>
          }
          deleteMany: {
            args: Prisma.LocalColetaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LocalColetaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LocalColetaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocalColetaPayload>
          }
          aggregate: {
            args: Prisma.LocalColetaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLocalColeta>
          }
          groupBy: {
            args: Prisma.LocalColetaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LocalColetaGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocalColetaCountArgs<ExtArgs>,
            result: $Utils.Optional<LocalColetaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EstadoCountOutputType
   */

  export type EstadoCountOutputType = {
    cidades: number
  }

  export type EstadoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cidades?: boolean | EstadoCountOutputTypeCountCidadesArgs
  }

  // Custom InputTypes

  /**
   * EstadoCountOutputType without action
   */
  export type EstadoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstadoCountOutputType
     */
    select?: EstadoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * EstadoCountOutputType without action
   */
  export type EstadoCountOutputTypeCountCidadesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CidadeWhereInput
  }



  /**
   * Count Type CidadeCountOutputType
   */

  export type CidadeCountOutputType = {
    locais_coleta: number
  }

  export type CidadeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    locais_coleta?: boolean | CidadeCountOutputTypeCountLocais_coletaArgs
  }

  // Custom InputTypes

  /**
   * CidadeCountOutputType without action
   */
  export type CidadeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CidadeCountOutputType
     */
    select?: CidadeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CidadeCountOutputType without action
   */
  export type CidadeCountOutputTypeCountLocais_coletaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocalColetaWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Estado
   */

  export type AggregateEstado = {
    _count: EstadoCountAggregateOutputType | null
    _avg: EstadoAvgAggregateOutputType | null
    _sum: EstadoSumAggregateOutputType | null
    _min: EstadoMinAggregateOutputType | null
    _max: EstadoMaxAggregateOutputType | null
  }

  export type EstadoAvgAggregateOutputType = {
    id: number | null
  }

  export type EstadoSumAggregateOutputType = {
    id: number | null
  }

  export type EstadoMinAggregateOutputType = {
    id: number | null
    nome: string | null
    sigla: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type EstadoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    sigla: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type EstadoCountAggregateOutputType = {
    id: number
    nome: number
    sigla: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type EstadoAvgAggregateInputType = {
    id?: true
  }

  export type EstadoSumAggregateInputType = {
    id?: true
  }

  export type EstadoMinAggregateInputType = {
    id?: true
    nome?: true
    sigla?: true
    created_at?: true
    updated_at?: true
  }

  export type EstadoMaxAggregateInputType = {
    id?: true
    nome?: true
    sigla?: true
    created_at?: true
    updated_at?: true
  }

  export type EstadoCountAggregateInputType = {
    id?: true
    nome?: true
    sigla?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type EstadoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Estado to aggregate.
     */
    where?: EstadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estados to fetch.
     */
    orderBy?: EstadoOrderByWithRelationInput | EstadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EstadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Estados
    **/
    _count?: true | EstadoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EstadoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EstadoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EstadoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EstadoMaxAggregateInputType
  }

  export type GetEstadoAggregateType<T extends EstadoAggregateArgs> = {
        [P in keyof T & keyof AggregateEstado]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEstado[P]>
      : GetScalarType<T[P], AggregateEstado[P]>
  }




  export type EstadoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EstadoWhereInput
    orderBy?: EstadoOrderByWithAggregationInput | EstadoOrderByWithAggregationInput[]
    by: EstadoScalarFieldEnum[] | EstadoScalarFieldEnum
    having?: EstadoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EstadoCountAggregateInputType | true
    _avg?: EstadoAvgAggregateInputType
    _sum?: EstadoSumAggregateInputType
    _min?: EstadoMinAggregateInputType
    _max?: EstadoMaxAggregateInputType
  }

  export type EstadoGroupByOutputType = {
    id: number
    nome: string
    sigla: string
    created_at: Date
    updated_at: Date
    _count: EstadoCountAggregateOutputType | null
    _avg: EstadoAvgAggregateOutputType | null
    _sum: EstadoSumAggregateOutputType | null
    _min: EstadoMinAggregateOutputType | null
    _max: EstadoMaxAggregateOutputType | null
  }

  type GetEstadoGroupByPayload<T extends EstadoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EstadoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EstadoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EstadoGroupByOutputType[P]>
            : GetScalarType<T[P], EstadoGroupByOutputType[P]>
        }
      >
    >


  export type EstadoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    sigla?: boolean
    created_at?: boolean
    updated_at?: boolean
    cidades?: boolean | Estado$cidadesArgs<ExtArgs>
    _count?: boolean | EstadoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["estado"]>

  export type EstadoSelectScalar = {
    id?: boolean
    nome?: boolean
    sigla?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type EstadoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cidades?: boolean | Estado$cidadesArgs<ExtArgs>
    _count?: boolean | EstadoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $EstadoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Estado"
    objects: {
      cidades: Prisma.$CidadePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      sigla: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["estado"]>
    composites: {}
  }


  type EstadoGetPayload<S extends boolean | null | undefined | EstadoDefaultArgs> = $Result.GetResult<Prisma.$EstadoPayload, S>

  type EstadoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EstadoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EstadoCountAggregateInputType | true
    }

  export interface EstadoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Estado'], meta: { name: 'Estado' } }
    /**
     * Find zero or one Estado that matches the filter.
     * @param {EstadoFindUniqueArgs} args - Arguments to find a Estado
     * @example
     * // Get one Estado
     * const estado = await prisma.estado.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EstadoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EstadoFindUniqueArgs<ExtArgs>>
    ): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Estado that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EstadoFindUniqueOrThrowArgs} args - Arguments to find a Estado
     * @example
     * // Get one Estado
     * const estado = await prisma.estado.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EstadoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EstadoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Estado that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoFindFirstArgs} args - Arguments to find a Estado
     * @example
     * // Get one Estado
     * const estado = await prisma.estado.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EstadoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EstadoFindFirstArgs<ExtArgs>>
    ): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Estado that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoFindFirstOrThrowArgs} args - Arguments to find a Estado
     * @example
     * // Get one Estado
     * const estado = await prisma.estado.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EstadoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EstadoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Estados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Estados
     * const estados = await prisma.estado.findMany()
     * 
     * // Get first 10 Estados
     * const estados = await prisma.estado.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const estadoWithIdOnly = await prisma.estado.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EstadoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EstadoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Estado.
     * @param {EstadoCreateArgs} args - Arguments to create a Estado.
     * @example
     * // Create one Estado
     * const Estado = await prisma.estado.create({
     *   data: {
     *     // ... data to create a Estado
     *   }
     * })
     * 
    **/
    create<T extends EstadoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EstadoCreateArgs<ExtArgs>>
    ): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Estado.
     * @param {EstadoDeleteArgs} args - Arguments to delete one Estado.
     * @example
     * // Delete one Estado
     * const Estado = await prisma.estado.delete({
     *   where: {
     *     // ... filter to delete one Estado
     *   }
     * })
     * 
    **/
    delete<T extends EstadoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EstadoDeleteArgs<ExtArgs>>
    ): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Estado.
     * @param {EstadoUpdateArgs} args - Arguments to update one Estado.
     * @example
     * // Update one Estado
     * const estado = await prisma.estado.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EstadoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EstadoUpdateArgs<ExtArgs>>
    ): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Estados.
     * @param {EstadoDeleteManyArgs} args - Arguments to filter Estados to delete.
     * @example
     * // Delete a few Estados
     * const { count } = await prisma.estado.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EstadoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EstadoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Estados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Estados
     * const estado = await prisma.estado.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EstadoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EstadoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Estado.
     * @param {EstadoUpsertArgs} args - Arguments to update or create a Estado.
     * @example
     * // Update or create a Estado
     * const estado = await prisma.estado.upsert({
     *   create: {
     *     // ... data to create a Estado
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Estado we want to update
     *   }
     * })
    **/
    upsert<T extends EstadoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EstadoUpsertArgs<ExtArgs>>
    ): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Estados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoCountArgs} args - Arguments to filter Estados to count.
     * @example
     * // Count the number of Estados
     * const count = await prisma.estado.count({
     *   where: {
     *     // ... the filter for the Estados we want to count
     *   }
     * })
    **/
    count<T extends EstadoCountArgs>(
      args?: Subset<T, EstadoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EstadoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Estado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EstadoAggregateArgs>(args: Subset<T, EstadoAggregateArgs>): Prisma.PrismaPromise<GetEstadoAggregateType<T>>

    /**
     * Group by Estado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EstadoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EstadoGroupByArgs['orderBy'] }
        : { orderBy?: EstadoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EstadoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEstadoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Estado model
   */
  readonly fields: EstadoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Estado.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EstadoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    cidades<T extends Estado$cidadesArgs<ExtArgs> = {}>(args?: Subset<T, Estado$cidadesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CidadePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Estado model
   */ 
  interface EstadoFieldRefs {
    readonly id: FieldRef<"Estado", 'Int'>
    readonly nome: FieldRef<"Estado", 'String'>
    readonly sigla: FieldRef<"Estado", 'String'>
    readonly created_at: FieldRef<"Estado", 'DateTime'>
    readonly updated_at: FieldRef<"Estado", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Estado findUnique
   */
  export type EstadoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter, which Estado to fetch.
     */
    where: EstadoWhereUniqueInput
  }


  /**
   * Estado findUniqueOrThrow
   */
  export type EstadoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter, which Estado to fetch.
     */
    where: EstadoWhereUniqueInput
  }


  /**
   * Estado findFirst
   */
  export type EstadoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter, which Estado to fetch.
     */
    where?: EstadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estados to fetch.
     */
    orderBy?: EstadoOrderByWithRelationInput | EstadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Estados.
     */
    cursor?: EstadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Estados.
     */
    distinct?: EstadoScalarFieldEnum | EstadoScalarFieldEnum[]
  }


  /**
   * Estado findFirstOrThrow
   */
  export type EstadoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter, which Estado to fetch.
     */
    where?: EstadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estados to fetch.
     */
    orderBy?: EstadoOrderByWithRelationInput | EstadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Estados.
     */
    cursor?: EstadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Estados.
     */
    distinct?: EstadoScalarFieldEnum | EstadoScalarFieldEnum[]
  }


  /**
   * Estado findMany
   */
  export type EstadoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter, which Estados to fetch.
     */
    where?: EstadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estados to fetch.
     */
    orderBy?: EstadoOrderByWithRelationInput | EstadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Estados.
     */
    cursor?: EstadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estados.
     */
    skip?: number
    distinct?: EstadoScalarFieldEnum | EstadoScalarFieldEnum[]
  }


  /**
   * Estado create
   */
  export type EstadoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * The data needed to create a Estado.
     */
    data: XOR<EstadoCreateInput, EstadoUncheckedCreateInput>
  }


  /**
   * Estado update
   */
  export type EstadoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * The data needed to update a Estado.
     */
    data: XOR<EstadoUpdateInput, EstadoUncheckedUpdateInput>
    /**
     * Choose, which Estado to update.
     */
    where: EstadoWhereUniqueInput
  }


  /**
   * Estado updateMany
   */
  export type EstadoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Estados.
     */
    data: XOR<EstadoUpdateManyMutationInput, EstadoUncheckedUpdateManyInput>
    /**
     * Filter which Estados to update
     */
    where?: EstadoWhereInput
  }


  /**
   * Estado upsert
   */
  export type EstadoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * The filter to search for the Estado to update in case it exists.
     */
    where: EstadoWhereUniqueInput
    /**
     * In case the Estado found by the `where` argument doesn't exist, create a new Estado with this data.
     */
    create: XOR<EstadoCreateInput, EstadoUncheckedCreateInput>
    /**
     * In case the Estado was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EstadoUpdateInput, EstadoUncheckedUpdateInput>
  }


  /**
   * Estado delete
   */
  export type EstadoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter which Estado to delete.
     */
    where: EstadoWhereUniqueInput
  }


  /**
   * Estado deleteMany
   */
  export type EstadoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Estados to delete
     */
    where?: EstadoWhereInput
  }


  /**
   * Estado.cidades
   */
  export type Estado$cidadesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cidade
     */
    select?: CidadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CidadeInclude<ExtArgs> | null
    where?: CidadeWhereInput
    orderBy?: CidadeOrderByWithRelationInput | CidadeOrderByWithRelationInput[]
    cursor?: CidadeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CidadeScalarFieldEnum | CidadeScalarFieldEnum[]
  }


  /**
   * Estado without action
   */
  export type EstadoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoInclude<ExtArgs> | null
  }



  /**
   * Model Cidade
   */

  export type AggregateCidade = {
    _count: CidadeCountAggregateOutputType | null
    _avg: CidadeAvgAggregateOutputType | null
    _sum: CidadeSumAggregateOutputType | null
    _min: CidadeMinAggregateOutputType | null
    _max: CidadeMaxAggregateOutputType | null
  }

  export type CidadeAvgAggregateOutputType = {
    id: number | null
    estado_id: number | null
  }

  export type CidadeSumAggregateOutputType = {
    id: number | null
    estado_id: number | null
  }

  export type CidadeMinAggregateOutputType = {
    id: number | null
    nome: string | null
    estado_id: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CidadeMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    estado_id: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CidadeCountAggregateOutputType = {
    id: number
    nome: number
    estado_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type CidadeAvgAggregateInputType = {
    id?: true
    estado_id?: true
  }

  export type CidadeSumAggregateInputType = {
    id?: true
    estado_id?: true
  }

  export type CidadeMinAggregateInputType = {
    id?: true
    nome?: true
    estado_id?: true
    created_at?: true
    updated_at?: true
  }

  export type CidadeMaxAggregateInputType = {
    id?: true
    nome?: true
    estado_id?: true
    created_at?: true
    updated_at?: true
  }

  export type CidadeCountAggregateInputType = {
    id?: true
    nome?: true
    estado_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type CidadeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cidade to aggregate.
     */
    where?: CidadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cidades to fetch.
     */
    orderBy?: CidadeOrderByWithRelationInput | CidadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CidadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cidades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cidades
    **/
    _count?: true | CidadeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CidadeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CidadeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CidadeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CidadeMaxAggregateInputType
  }

  export type GetCidadeAggregateType<T extends CidadeAggregateArgs> = {
        [P in keyof T & keyof AggregateCidade]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCidade[P]>
      : GetScalarType<T[P], AggregateCidade[P]>
  }




  export type CidadeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CidadeWhereInput
    orderBy?: CidadeOrderByWithAggregationInput | CidadeOrderByWithAggregationInput[]
    by: CidadeScalarFieldEnum[] | CidadeScalarFieldEnum
    having?: CidadeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CidadeCountAggregateInputType | true
    _avg?: CidadeAvgAggregateInputType
    _sum?: CidadeSumAggregateInputType
    _min?: CidadeMinAggregateInputType
    _max?: CidadeMaxAggregateInputType
  }

  export type CidadeGroupByOutputType = {
    id: number
    nome: string
    estado_id: number
    created_at: Date
    updated_at: Date
    _count: CidadeCountAggregateOutputType | null
    _avg: CidadeAvgAggregateOutputType | null
    _sum: CidadeSumAggregateOutputType | null
    _min: CidadeMinAggregateOutputType | null
    _max: CidadeMaxAggregateOutputType | null
  }

  type GetCidadeGroupByPayload<T extends CidadeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CidadeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CidadeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CidadeGroupByOutputType[P]>
            : GetScalarType<T[P], CidadeGroupByOutputType[P]>
        }
      >
    >


  export type CidadeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    estado_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    estado?: boolean | EstadoDefaultArgs<ExtArgs>
    locais_coleta?: boolean | Cidade$locais_coletaArgs<ExtArgs>
    _count?: boolean | CidadeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cidade"]>

  export type CidadeSelectScalar = {
    id?: boolean
    nome?: boolean
    estado_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type CidadeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    estado?: boolean | EstadoDefaultArgs<ExtArgs>
    locais_coleta?: boolean | Cidade$locais_coletaArgs<ExtArgs>
    _count?: boolean | CidadeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CidadePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cidade"
    objects: {
      estado: Prisma.$EstadoPayload<ExtArgs>
      locais_coleta: Prisma.$LocalColetaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      estado_id: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["cidade"]>
    composites: {}
  }


  type CidadeGetPayload<S extends boolean | null | undefined | CidadeDefaultArgs> = $Result.GetResult<Prisma.$CidadePayload, S>

  type CidadeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CidadeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CidadeCountAggregateInputType | true
    }

  export interface CidadeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cidade'], meta: { name: 'Cidade' } }
    /**
     * Find zero or one Cidade that matches the filter.
     * @param {CidadeFindUniqueArgs} args - Arguments to find a Cidade
     * @example
     * // Get one Cidade
     * const cidade = await prisma.cidade.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CidadeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CidadeFindUniqueArgs<ExtArgs>>
    ): Prisma__CidadeClient<$Result.GetResult<Prisma.$CidadePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Cidade that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CidadeFindUniqueOrThrowArgs} args - Arguments to find a Cidade
     * @example
     * // Get one Cidade
     * const cidade = await prisma.cidade.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CidadeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CidadeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CidadeClient<$Result.GetResult<Prisma.$CidadePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Cidade that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CidadeFindFirstArgs} args - Arguments to find a Cidade
     * @example
     * // Get one Cidade
     * const cidade = await prisma.cidade.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CidadeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CidadeFindFirstArgs<ExtArgs>>
    ): Prisma__CidadeClient<$Result.GetResult<Prisma.$CidadePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Cidade that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CidadeFindFirstOrThrowArgs} args - Arguments to find a Cidade
     * @example
     * // Get one Cidade
     * const cidade = await prisma.cidade.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CidadeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CidadeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CidadeClient<$Result.GetResult<Prisma.$CidadePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Cidades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CidadeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cidades
     * const cidades = await prisma.cidade.findMany()
     * 
     * // Get first 10 Cidades
     * const cidades = await prisma.cidade.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cidadeWithIdOnly = await prisma.cidade.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CidadeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CidadeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CidadePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Cidade.
     * @param {CidadeCreateArgs} args - Arguments to create a Cidade.
     * @example
     * // Create one Cidade
     * const Cidade = await prisma.cidade.create({
     *   data: {
     *     // ... data to create a Cidade
     *   }
     * })
     * 
    **/
    create<T extends CidadeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CidadeCreateArgs<ExtArgs>>
    ): Prisma__CidadeClient<$Result.GetResult<Prisma.$CidadePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Cidade.
     * @param {CidadeDeleteArgs} args - Arguments to delete one Cidade.
     * @example
     * // Delete one Cidade
     * const Cidade = await prisma.cidade.delete({
     *   where: {
     *     // ... filter to delete one Cidade
     *   }
     * })
     * 
    **/
    delete<T extends CidadeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CidadeDeleteArgs<ExtArgs>>
    ): Prisma__CidadeClient<$Result.GetResult<Prisma.$CidadePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Cidade.
     * @param {CidadeUpdateArgs} args - Arguments to update one Cidade.
     * @example
     * // Update one Cidade
     * const cidade = await prisma.cidade.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CidadeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CidadeUpdateArgs<ExtArgs>>
    ): Prisma__CidadeClient<$Result.GetResult<Prisma.$CidadePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Cidades.
     * @param {CidadeDeleteManyArgs} args - Arguments to filter Cidades to delete.
     * @example
     * // Delete a few Cidades
     * const { count } = await prisma.cidade.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CidadeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CidadeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cidades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CidadeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cidades
     * const cidade = await prisma.cidade.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CidadeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CidadeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cidade.
     * @param {CidadeUpsertArgs} args - Arguments to update or create a Cidade.
     * @example
     * // Update or create a Cidade
     * const cidade = await prisma.cidade.upsert({
     *   create: {
     *     // ... data to create a Cidade
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cidade we want to update
     *   }
     * })
    **/
    upsert<T extends CidadeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CidadeUpsertArgs<ExtArgs>>
    ): Prisma__CidadeClient<$Result.GetResult<Prisma.$CidadePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Cidades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CidadeCountArgs} args - Arguments to filter Cidades to count.
     * @example
     * // Count the number of Cidades
     * const count = await prisma.cidade.count({
     *   where: {
     *     // ... the filter for the Cidades we want to count
     *   }
     * })
    **/
    count<T extends CidadeCountArgs>(
      args?: Subset<T, CidadeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CidadeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cidade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CidadeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CidadeAggregateArgs>(args: Subset<T, CidadeAggregateArgs>): Prisma.PrismaPromise<GetCidadeAggregateType<T>>

    /**
     * Group by Cidade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CidadeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CidadeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CidadeGroupByArgs['orderBy'] }
        : { orderBy?: CidadeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CidadeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCidadeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cidade model
   */
  readonly fields: CidadeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cidade.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CidadeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    estado<T extends EstadoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EstadoDefaultArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    locais_coleta<T extends Cidade$locais_coletaArgs<ExtArgs> = {}>(args?: Subset<T, Cidade$locais_coletaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocalColetaPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Cidade model
   */ 
  interface CidadeFieldRefs {
    readonly id: FieldRef<"Cidade", 'Int'>
    readonly nome: FieldRef<"Cidade", 'String'>
    readonly estado_id: FieldRef<"Cidade", 'Int'>
    readonly created_at: FieldRef<"Cidade", 'DateTime'>
    readonly updated_at: FieldRef<"Cidade", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Cidade findUnique
   */
  export type CidadeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cidade
     */
    select?: CidadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CidadeInclude<ExtArgs> | null
    /**
     * Filter, which Cidade to fetch.
     */
    where: CidadeWhereUniqueInput
  }


  /**
   * Cidade findUniqueOrThrow
   */
  export type CidadeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cidade
     */
    select?: CidadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CidadeInclude<ExtArgs> | null
    /**
     * Filter, which Cidade to fetch.
     */
    where: CidadeWhereUniqueInput
  }


  /**
   * Cidade findFirst
   */
  export type CidadeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cidade
     */
    select?: CidadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CidadeInclude<ExtArgs> | null
    /**
     * Filter, which Cidade to fetch.
     */
    where?: CidadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cidades to fetch.
     */
    orderBy?: CidadeOrderByWithRelationInput | CidadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cidades.
     */
    cursor?: CidadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cidades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cidades.
     */
    distinct?: CidadeScalarFieldEnum | CidadeScalarFieldEnum[]
  }


  /**
   * Cidade findFirstOrThrow
   */
  export type CidadeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cidade
     */
    select?: CidadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CidadeInclude<ExtArgs> | null
    /**
     * Filter, which Cidade to fetch.
     */
    where?: CidadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cidades to fetch.
     */
    orderBy?: CidadeOrderByWithRelationInput | CidadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cidades.
     */
    cursor?: CidadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cidades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cidades.
     */
    distinct?: CidadeScalarFieldEnum | CidadeScalarFieldEnum[]
  }


  /**
   * Cidade findMany
   */
  export type CidadeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cidade
     */
    select?: CidadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CidadeInclude<ExtArgs> | null
    /**
     * Filter, which Cidades to fetch.
     */
    where?: CidadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cidades to fetch.
     */
    orderBy?: CidadeOrderByWithRelationInput | CidadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cidades.
     */
    cursor?: CidadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cidades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cidades.
     */
    skip?: number
    distinct?: CidadeScalarFieldEnum | CidadeScalarFieldEnum[]
  }


  /**
   * Cidade create
   */
  export type CidadeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cidade
     */
    select?: CidadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CidadeInclude<ExtArgs> | null
    /**
     * The data needed to create a Cidade.
     */
    data: XOR<CidadeCreateInput, CidadeUncheckedCreateInput>
  }


  /**
   * Cidade update
   */
  export type CidadeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cidade
     */
    select?: CidadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CidadeInclude<ExtArgs> | null
    /**
     * The data needed to update a Cidade.
     */
    data: XOR<CidadeUpdateInput, CidadeUncheckedUpdateInput>
    /**
     * Choose, which Cidade to update.
     */
    where: CidadeWhereUniqueInput
  }


  /**
   * Cidade updateMany
   */
  export type CidadeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cidades.
     */
    data: XOR<CidadeUpdateManyMutationInput, CidadeUncheckedUpdateManyInput>
    /**
     * Filter which Cidades to update
     */
    where?: CidadeWhereInput
  }


  /**
   * Cidade upsert
   */
  export type CidadeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cidade
     */
    select?: CidadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CidadeInclude<ExtArgs> | null
    /**
     * The filter to search for the Cidade to update in case it exists.
     */
    where: CidadeWhereUniqueInput
    /**
     * In case the Cidade found by the `where` argument doesn't exist, create a new Cidade with this data.
     */
    create: XOR<CidadeCreateInput, CidadeUncheckedCreateInput>
    /**
     * In case the Cidade was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CidadeUpdateInput, CidadeUncheckedUpdateInput>
  }


  /**
   * Cidade delete
   */
  export type CidadeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cidade
     */
    select?: CidadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CidadeInclude<ExtArgs> | null
    /**
     * Filter which Cidade to delete.
     */
    where: CidadeWhereUniqueInput
  }


  /**
   * Cidade deleteMany
   */
  export type CidadeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cidades to delete
     */
    where?: CidadeWhereInput
  }


  /**
   * Cidade.locais_coleta
   */
  export type Cidade$locais_coletaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocalColeta
     */
    select?: LocalColetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocalColetaInclude<ExtArgs> | null
    where?: LocalColetaWhereInput
    orderBy?: LocalColetaOrderByWithRelationInput | LocalColetaOrderByWithRelationInput[]
    cursor?: LocalColetaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LocalColetaScalarFieldEnum | LocalColetaScalarFieldEnum[]
  }


  /**
   * Cidade without action
   */
  export type CidadeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cidade
     */
    select?: CidadeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CidadeInclude<ExtArgs> | null
  }



  /**
   * Model LocalColeta
   */

  export type AggregateLocalColeta = {
    _count: LocalColetaCountAggregateOutputType | null
    _avg: LocalColetaAvgAggregateOutputType | null
    _sum: LocalColetaSumAggregateOutputType | null
    _min: LocalColetaMinAggregateOutputType | null
    _max: LocalColetaMaxAggregateOutputType | null
  }

  export type LocalColetaAvgAggregateOutputType = {
    id: number | null
    cidade_id: number | null
  }

  export type LocalColetaSumAggregateOutputType = {
    id: number | null
    cidade_id: number | null
  }

  export type LocalColetaMinAggregateOutputType = {
    id: number | null
    cidade_id: number | null
  }

  export type LocalColetaMaxAggregateOutputType = {
    id: number | null
    cidade_id: number | null
  }

  export type LocalColetaCountAggregateOutputType = {
    id: number
    cidade_id: number
    _all: number
  }


  export type LocalColetaAvgAggregateInputType = {
    id?: true
    cidade_id?: true
  }

  export type LocalColetaSumAggregateInputType = {
    id?: true
    cidade_id?: true
  }

  export type LocalColetaMinAggregateInputType = {
    id?: true
    cidade_id?: true
  }

  export type LocalColetaMaxAggregateInputType = {
    id?: true
    cidade_id?: true
  }

  export type LocalColetaCountAggregateInputType = {
    id?: true
    cidade_id?: true
    _all?: true
  }

  export type LocalColetaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LocalColeta to aggregate.
     */
    where?: LocalColetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocalColetas to fetch.
     */
    orderBy?: LocalColetaOrderByWithRelationInput | LocalColetaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocalColetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocalColetas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocalColetas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LocalColetas
    **/
    _count?: true | LocalColetaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocalColetaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocalColetaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocalColetaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocalColetaMaxAggregateInputType
  }

  export type GetLocalColetaAggregateType<T extends LocalColetaAggregateArgs> = {
        [P in keyof T & keyof AggregateLocalColeta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocalColeta[P]>
      : GetScalarType<T[P], AggregateLocalColeta[P]>
  }




  export type LocalColetaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocalColetaWhereInput
    orderBy?: LocalColetaOrderByWithAggregationInput | LocalColetaOrderByWithAggregationInput[]
    by: LocalColetaScalarFieldEnum[] | LocalColetaScalarFieldEnum
    having?: LocalColetaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocalColetaCountAggregateInputType | true
    _avg?: LocalColetaAvgAggregateInputType
    _sum?: LocalColetaSumAggregateInputType
    _min?: LocalColetaMinAggregateInputType
    _max?: LocalColetaMaxAggregateInputType
  }

  export type LocalColetaGroupByOutputType = {
    id: number
    cidade_id: number
    _count: LocalColetaCountAggregateOutputType | null
    _avg: LocalColetaAvgAggregateOutputType | null
    _sum: LocalColetaSumAggregateOutputType | null
    _min: LocalColetaMinAggregateOutputType | null
    _max: LocalColetaMaxAggregateOutputType | null
  }

  type GetLocalColetaGroupByPayload<T extends LocalColetaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocalColetaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocalColetaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocalColetaGroupByOutputType[P]>
            : GetScalarType<T[P], LocalColetaGroupByOutputType[P]>
        }
      >
    >


  export type LocalColetaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cidade_id?: boolean
    cidade?: boolean | CidadeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["localColeta"]>

  export type LocalColetaSelectScalar = {
    id?: boolean
    cidade_id?: boolean
  }

  export type LocalColetaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cidade?: boolean | CidadeDefaultArgs<ExtArgs>
  }


  export type $LocalColetaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LocalColeta"
    objects: {
      cidade: Prisma.$CidadePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      cidade_id: number
    }, ExtArgs["result"]["localColeta"]>
    composites: {}
  }


  type LocalColetaGetPayload<S extends boolean | null | undefined | LocalColetaDefaultArgs> = $Result.GetResult<Prisma.$LocalColetaPayload, S>

  type LocalColetaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LocalColetaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LocalColetaCountAggregateInputType | true
    }

  export interface LocalColetaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LocalColeta'], meta: { name: 'LocalColeta' } }
    /**
     * Find zero or one LocalColeta that matches the filter.
     * @param {LocalColetaFindUniqueArgs} args - Arguments to find a LocalColeta
     * @example
     * // Get one LocalColeta
     * const localColeta = await prisma.localColeta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LocalColetaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LocalColetaFindUniqueArgs<ExtArgs>>
    ): Prisma__LocalColetaClient<$Result.GetResult<Prisma.$LocalColetaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one LocalColeta that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LocalColetaFindUniqueOrThrowArgs} args - Arguments to find a LocalColeta
     * @example
     * // Get one LocalColeta
     * const localColeta = await prisma.localColeta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LocalColetaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LocalColetaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LocalColetaClient<$Result.GetResult<Prisma.$LocalColetaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first LocalColeta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocalColetaFindFirstArgs} args - Arguments to find a LocalColeta
     * @example
     * // Get one LocalColeta
     * const localColeta = await prisma.localColeta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LocalColetaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LocalColetaFindFirstArgs<ExtArgs>>
    ): Prisma__LocalColetaClient<$Result.GetResult<Prisma.$LocalColetaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first LocalColeta that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocalColetaFindFirstOrThrowArgs} args - Arguments to find a LocalColeta
     * @example
     * // Get one LocalColeta
     * const localColeta = await prisma.localColeta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LocalColetaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LocalColetaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LocalColetaClient<$Result.GetResult<Prisma.$LocalColetaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more LocalColetas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocalColetaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LocalColetas
     * const localColetas = await prisma.localColeta.findMany()
     * 
     * // Get first 10 LocalColetas
     * const localColetas = await prisma.localColeta.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const localColetaWithIdOnly = await prisma.localColeta.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LocalColetaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LocalColetaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocalColetaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a LocalColeta.
     * @param {LocalColetaCreateArgs} args - Arguments to create a LocalColeta.
     * @example
     * // Create one LocalColeta
     * const LocalColeta = await prisma.localColeta.create({
     *   data: {
     *     // ... data to create a LocalColeta
     *   }
     * })
     * 
    **/
    create<T extends LocalColetaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LocalColetaCreateArgs<ExtArgs>>
    ): Prisma__LocalColetaClient<$Result.GetResult<Prisma.$LocalColetaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a LocalColeta.
     * @param {LocalColetaDeleteArgs} args - Arguments to delete one LocalColeta.
     * @example
     * // Delete one LocalColeta
     * const LocalColeta = await prisma.localColeta.delete({
     *   where: {
     *     // ... filter to delete one LocalColeta
     *   }
     * })
     * 
    **/
    delete<T extends LocalColetaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LocalColetaDeleteArgs<ExtArgs>>
    ): Prisma__LocalColetaClient<$Result.GetResult<Prisma.$LocalColetaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one LocalColeta.
     * @param {LocalColetaUpdateArgs} args - Arguments to update one LocalColeta.
     * @example
     * // Update one LocalColeta
     * const localColeta = await prisma.localColeta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LocalColetaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LocalColetaUpdateArgs<ExtArgs>>
    ): Prisma__LocalColetaClient<$Result.GetResult<Prisma.$LocalColetaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more LocalColetas.
     * @param {LocalColetaDeleteManyArgs} args - Arguments to filter LocalColetas to delete.
     * @example
     * // Delete a few LocalColetas
     * const { count } = await prisma.localColeta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LocalColetaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LocalColetaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LocalColetas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocalColetaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LocalColetas
     * const localColeta = await prisma.localColeta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LocalColetaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LocalColetaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LocalColeta.
     * @param {LocalColetaUpsertArgs} args - Arguments to update or create a LocalColeta.
     * @example
     * // Update or create a LocalColeta
     * const localColeta = await prisma.localColeta.upsert({
     *   create: {
     *     // ... data to create a LocalColeta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LocalColeta we want to update
     *   }
     * })
    **/
    upsert<T extends LocalColetaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LocalColetaUpsertArgs<ExtArgs>>
    ): Prisma__LocalColetaClient<$Result.GetResult<Prisma.$LocalColetaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of LocalColetas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocalColetaCountArgs} args - Arguments to filter LocalColetas to count.
     * @example
     * // Count the number of LocalColetas
     * const count = await prisma.localColeta.count({
     *   where: {
     *     // ... the filter for the LocalColetas we want to count
     *   }
     * })
    **/
    count<T extends LocalColetaCountArgs>(
      args?: Subset<T, LocalColetaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocalColetaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LocalColeta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocalColetaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocalColetaAggregateArgs>(args: Subset<T, LocalColetaAggregateArgs>): Prisma.PrismaPromise<GetLocalColetaAggregateType<T>>

    /**
     * Group by LocalColeta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocalColetaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocalColetaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocalColetaGroupByArgs['orderBy'] }
        : { orderBy?: LocalColetaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocalColetaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocalColetaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LocalColeta model
   */
  readonly fields: LocalColetaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LocalColeta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocalColetaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    cidade<T extends CidadeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CidadeDefaultArgs<ExtArgs>>): Prisma__CidadeClient<$Result.GetResult<Prisma.$CidadePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the LocalColeta model
   */ 
  interface LocalColetaFieldRefs {
    readonly id: FieldRef<"LocalColeta", 'Int'>
    readonly cidade_id: FieldRef<"LocalColeta", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * LocalColeta findUnique
   */
  export type LocalColetaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocalColeta
     */
    select?: LocalColetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocalColetaInclude<ExtArgs> | null
    /**
     * Filter, which LocalColeta to fetch.
     */
    where: LocalColetaWhereUniqueInput
  }


  /**
   * LocalColeta findUniqueOrThrow
   */
  export type LocalColetaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocalColeta
     */
    select?: LocalColetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocalColetaInclude<ExtArgs> | null
    /**
     * Filter, which LocalColeta to fetch.
     */
    where: LocalColetaWhereUniqueInput
  }


  /**
   * LocalColeta findFirst
   */
  export type LocalColetaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocalColeta
     */
    select?: LocalColetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocalColetaInclude<ExtArgs> | null
    /**
     * Filter, which LocalColeta to fetch.
     */
    where?: LocalColetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocalColetas to fetch.
     */
    orderBy?: LocalColetaOrderByWithRelationInput | LocalColetaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LocalColetas.
     */
    cursor?: LocalColetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocalColetas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocalColetas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LocalColetas.
     */
    distinct?: LocalColetaScalarFieldEnum | LocalColetaScalarFieldEnum[]
  }


  /**
   * LocalColeta findFirstOrThrow
   */
  export type LocalColetaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocalColeta
     */
    select?: LocalColetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocalColetaInclude<ExtArgs> | null
    /**
     * Filter, which LocalColeta to fetch.
     */
    where?: LocalColetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocalColetas to fetch.
     */
    orderBy?: LocalColetaOrderByWithRelationInput | LocalColetaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LocalColetas.
     */
    cursor?: LocalColetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocalColetas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocalColetas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LocalColetas.
     */
    distinct?: LocalColetaScalarFieldEnum | LocalColetaScalarFieldEnum[]
  }


  /**
   * LocalColeta findMany
   */
  export type LocalColetaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocalColeta
     */
    select?: LocalColetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocalColetaInclude<ExtArgs> | null
    /**
     * Filter, which LocalColetas to fetch.
     */
    where?: LocalColetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocalColetas to fetch.
     */
    orderBy?: LocalColetaOrderByWithRelationInput | LocalColetaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LocalColetas.
     */
    cursor?: LocalColetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocalColetas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocalColetas.
     */
    skip?: number
    distinct?: LocalColetaScalarFieldEnum | LocalColetaScalarFieldEnum[]
  }


  /**
   * LocalColeta create
   */
  export type LocalColetaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocalColeta
     */
    select?: LocalColetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocalColetaInclude<ExtArgs> | null
    /**
     * The data needed to create a LocalColeta.
     */
    data: XOR<LocalColetaCreateInput, LocalColetaUncheckedCreateInput>
  }


  /**
   * LocalColeta update
   */
  export type LocalColetaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocalColeta
     */
    select?: LocalColetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocalColetaInclude<ExtArgs> | null
    /**
     * The data needed to update a LocalColeta.
     */
    data: XOR<LocalColetaUpdateInput, LocalColetaUncheckedUpdateInput>
    /**
     * Choose, which LocalColeta to update.
     */
    where: LocalColetaWhereUniqueInput
  }


  /**
   * LocalColeta updateMany
   */
  export type LocalColetaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LocalColetas.
     */
    data: XOR<LocalColetaUpdateManyMutationInput, LocalColetaUncheckedUpdateManyInput>
    /**
     * Filter which LocalColetas to update
     */
    where?: LocalColetaWhereInput
  }


  /**
   * LocalColeta upsert
   */
  export type LocalColetaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocalColeta
     */
    select?: LocalColetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocalColetaInclude<ExtArgs> | null
    /**
     * The filter to search for the LocalColeta to update in case it exists.
     */
    where: LocalColetaWhereUniqueInput
    /**
     * In case the LocalColeta found by the `where` argument doesn't exist, create a new LocalColeta with this data.
     */
    create: XOR<LocalColetaCreateInput, LocalColetaUncheckedCreateInput>
    /**
     * In case the LocalColeta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocalColetaUpdateInput, LocalColetaUncheckedUpdateInput>
  }


  /**
   * LocalColeta delete
   */
  export type LocalColetaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocalColeta
     */
    select?: LocalColetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocalColetaInclude<ExtArgs> | null
    /**
     * Filter which LocalColeta to delete.
     */
    where: LocalColetaWhereUniqueInput
  }


  /**
   * LocalColeta deleteMany
   */
  export type LocalColetaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LocalColetas to delete
     */
    where?: LocalColetaWhereInput
  }


  /**
   * LocalColeta without action
   */
  export type LocalColetaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocalColeta
     */
    select?: LocalColetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocalColetaInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const EstadoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    sigla: 'sigla',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type EstadoScalarFieldEnum = (typeof EstadoScalarFieldEnum)[keyof typeof EstadoScalarFieldEnum]


  export const CidadeScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    estado_id: 'estado_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type CidadeScalarFieldEnum = (typeof CidadeScalarFieldEnum)[keyof typeof CidadeScalarFieldEnum]


  export const LocalColetaScalarFieldEnum: {
    id: 'id',
    cidade_id: 'cidade_id'
  };

  export type LocalColetaScalarFieldEnum = (typeof LocalColetaScalarFieldEnum)[keyof typeof LocalColetaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type EstadoWhereInput = {
    AND?: EstadoWhereInput | EstadoWhereInput[]
    OR?: EstadoWhereInput[]
    NOT?: EstadoWhereInput | EstadoWhereInput[]
    id?: IntFilter<"Estado"> | number
    nome?: StringFilter<"Estado"> | string
    sigla?: StringFilter<"Estado"> | string
    created_at?: DateTimeFilter<"Estado"> | Date | string
    updated_at?: DateTimeFilter<"Estado"> | Date | string
    cidades?: CidadeListRelationFilter
  }

  export type EstadoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    sigla?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    cidades?: CidadeOrderByRelationAggregateInput
  }

  export type EstadoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    sigla?: string
    AND?: EstadoWhereInput | EstadoWhereInput[]
    OR?: EstadoWhereInput[]
    NOT?: EstadoWhereInput | EstadoWhereInput[]
    nome?: StringFilter<"Estado"> | string
    created_at?: DateTimeFilter<"Estado"> | Date | string
    updated_at?: DateTimeFilter<"Estado"> | Date | string
    cidades?: CidadeListRelationFilter
  }, "id" | "sigla">

  export type EstadoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    sigla?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: EstadoCountOrderByAggregateInput
    _avg?: EstadoAvgOrderByAggregateInput
    _max?: EstadoMaxOrderByAggregateInput
    _min?: EstadoMinOrderByAggregateInput
    _sum?: EstadoSumOrderByAggregateInput
  }

  export type EstadoScalarWhereWithAggregatesInput = {
    AND?: EstadoScalarWhereWithAggregatesInput | EstadoScalarWhereWithAggregatesInput[]
    OR?: EstadoScalarWhereWithAggregatesInput[]
    NOT?: EstadoScalarWhereWithAggregatesInput | EstadoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Estado"> | number
    nome?: StringWithAggregatesFilter<"Estado"> | string
    sigla?: StringWithAggregatesFilter<"Estado"> | string
    created_at?: DateTimeWithAggregatesFilter<"Estado"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Estado"> | Date | string
  }

  export type CidadeWhereInput = {
    AND?: CidadeWhereInput | CidadeWhereInput[]
    OR?: CidadeWhereInput[]
    NOT?: CidadeWhereInput | CidadeWhereInput[]
    id?: IntFilter<"Cidade"> | number
    nome?: StringFilter<"Cidade"> | string
    estado_id?: IntFilter<"Cidade"> | number
    created_at?: DateTimeFilter<"Cidade"> | Date | string
    updated_at?: DateTimeFilter<"Cidade"> | Date | string
    estado?: XOR<EstadoRelationFilter, EstadoWhereInput>
    locais_coleta?: LocalColetaListRelationFilter
  }

  export type CidadeOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    estado_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    estado?: EstadoOrderByWithRelationInput
    locais_coleta?: LocalColetaOrderByRelationAggregateInput
  }

  export type CidadeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CidadeWhereInput | CidadeWhereInput[]
    OR?: CidadeWhereInput[]
    NOT?: CidadeWhereInput | CidadeWhereInput[]
    nome?: StringFilter<"Cidade"> | string
    estado_id?: IntFilter<"Cidade"> | number
    created_at?: DateTimeFilter<"Cidade"> | Date | string
    updated_at?: DateTimeFilter<"Cidade"> | Date | string
    estado?: XOR<EstadoRelationFilter, EstadoWhereInput>
    locais_coleta?: LocalColetaListRelationFilter
  }, "id">

  export type CidadeOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    estado_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: CidadeCountOrderByAggregateInput
    _avg?: CidadeAvgOrderByAggregateInput
    _max?: CidadeMaxOrderByAggregateInput
    _min?: CidadeMinOrderByAggregateInput
    _sum?: CidadeSumOrderByAggregateInput
  }

  export type CidadeScalarWhereWithAggregatesInput = {
    AND?: CidadeScalarWhereWithAggregatesInput | CidadeScalarWhereWithAggregatesInput[]
    OR?: CidadeScalarWhereWithAggregatesInput[]
    NOT?: CidadeScalarWhereWithAggregatesInput | CidadeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Cidade"> | number
    nome?: StringWithAggregatesFilter<"Cidade"> | string
    estado_id?: IntWithAggregatesFilter<"Cidade"> | number
    created_at?: DateTimeWithAggregatesFilter<"Cidade"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Cidade"> | Date | string
  }

  export type LocalColetaWhereInput = {
    AND?: LocalColetaWhereInput | LocalColetaWhereInput[]
    OR?: LocalColetaWhereInput[]
    NOT?: LocalColetaWhereInput | LocalColetaWhereInput[]
    id?: IntFilter<"LocalColeta"> | number
    cidade_id?: IntFilter<"LocalColeta"> | number
    cidade?: XOR<CidadeRelationFilter, CidadeWhereInput>
  }

  export type LocalColetaOrderByWithRelationInput = {
    id?: SortOrder
    cidade_id?: SortOrder
    cidade?: CidadeOrderByWithRelationInput
  }

  export type LocalColetaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LocalColetaWhereInput | LocalColetaWhereInput[]
    OR?: LocalColetaWhereInput[]
    NOT?: LocalColetaWhereInput | LocalColetaWhereInput[]
    cidade_id?: IntFilter<"LocalColeta"> | number
    cidade?: XOR<CidadeRelationFilter, CidadeWhereInput>
  }, "id">

  export type LocalColetaOrderByWithAggregationInput = {
    id?: SortOrder
    cidade_id?: SortOrder
    _count?: LocalColetaCountOrderByAggregateInput
    _avg?: LocalColetaAvgOrderByAggregateInput
    _max?: LocalColetaMaxOrderByAggregateInput
    _min?: LocalColetaMinOrderByAggregateInput
    _sum?: LocalColetaSumOrderByAggregateInput
  }

  export type LocalColetaScalarWhereWithAggregatesInput = {
    AND?: LocalColetaScalarWhereWithAggregatesInput | LocalColetaScalarWhereWithAggregatesInput[]
    OR?: LocalColetaScalarWhereWithAggregatesInput[]
    NOT?: LocalColetaScalarWhereWithAggregatesInput | LocalColetaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LocalColeta"> | number
    cidade_id?: IntWithAggregatesFilter<"LocalColeta"> | number
  }

  export type EstadoCreateInput = {
    nome: string
    sigla: string
    created_at?: Date | string
    updated_at?: Date | string
    cidades?: CidadeCreateNestedManyWithoutEstadoInput
  }

  export type EstadoUncheckedCreateInput = {
    id?: number
    nome: string
    sigla: string
    created_at?: Date | string
    updated_at?: Date | string
    cidades?: CidadeUncheckedCreateNestedManyWithoutEstadoInput
  }

  export type EstadoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cidades?: CidadeUpdateManyWithoutEstadoNestedInput
  }

  export type EstadoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cidades?: CidadeUncheckedUpdateManyWithoutEstadoNestedInput
  }

  export type EstadoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EstadoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CidadeCreateInput = {
    nome: string
    created_at?: Date | string
    updated_at?: Date | string
    estado: EstadoCreateNestedOneWithoutCidadesInput
    locais_coleta?: LocalColetaCreateNestedManyWithoutCidadeInput
  }

  export type CidadeUncheckedCreateInput = {
    id?: number
    nome: string
    estado_id: number
    created_at?: Date | string
    updated_at?: Date | string
    locais_coleta?: LocalColetaUncheckedCreateNestedManyWithoutCidadeInput
  }

  export type CidadeUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EstadoUpdateOneRequiredWithoutCidadesNestedInput
    locais_coleta?: LocalColetaUpdateManyWithoutCidadeNestedInput
  }

  export type CidadeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    estado_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    locais_coleta?: LocalColetaUncheckedUpdateManyWithoutCidadeNestedInput
  }

  export type CidadeUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CidadeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    estado_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocalColetaCreateInput = {
    cidade: CidadeCreateNestedOneWithoutLocais_coletaInput
  }

  export type LocalColetaUncheckedCreateInput = {
    id?: number
    cidade_id: number
  }

  export type LocalColetaUpdateInput = {
    cidade?: CidadeUpdateOneRequiredWithoutLocais_coletaNestedInput
  }

  export type LocalColetaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cidade_id?: IntFieldUpdateOperationsInput | number
  }

  export type LocalColetaUpdateManyMutationInput = {

  }

  export type LocalColetaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cidade_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CidadeListRelationFilter = {
    every?: CidadeWhereInput
    some?: CidadeWhereInput
    none?: CidadeWhereInput
  }

  export type CidadeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EstadoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    sigla?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EstadoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EstadoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    sigla?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EstadoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    sigla?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EstadoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EstadoRelationFilter = {
    is?: EstadoWhereInput
    isNot?: EstadoWhereInput
  }

  export type LocalColetaListRelationFilter = {
    every?: LocalColetaWhereInput
    some?: LocalColetaWhereInput
    none?: LocalColetaWhereInput
  }

  export type LocalColetaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CidadeCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    estado_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CidadeAvgOrderByAggregateInput = {
    id?: SortOrder
    estado_id?: SortOrder
  }

  export type CidadeMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    estado_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CidadeMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    estado_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CidadeSumOrderByAggregateInput = {
    id?: SortOrder
    estado_id?: SortOrder
  }

  export type CidadeRelationFilter = {
    is?: CidadeWhereInput
    isNot?: CidadeWhereInput
  }

  export type LocalColetaCountOrderByAggregateInput = {
    id?: SortOrder
    cidade_id?: SortOrder
  }

  export type LocalColetaAvgOrderByAggregateInput = {
    id?: SortOrder
    cidade_id?: SortOrder
  }

  export type LocalColetaMaxOrderByAggregateInput = {
    id?: SortOrder
    cidade_id?: SortOrder
  }

  export type LocalColetaMinOrderByAggregateInput = {
    id?: SortOrder
    cidade_id?: SortOrder
  }

  export type LocalColetaSumOrderByAggregateInput = {
    id?: SortOrder
    cidade_id?: SortOrder
  }

  export type CidadeCreateNestedManyWithoutEstadoInput = {
    create?: XOR<CidadeCreateWithoutEstadoInput, CidadeUncheckedCreateWithoutEstadoInput> | CidadeCreateWithoutEstadoInput[] | CidadeUncheckedCreateWithoutEstadoInput[]
    connectOrCreate?: CidadeCreateOrConnectWithoutEstadoInput | CidadeCreateOrConnectWithoutEstadoInput[]
    connect?: CidadeWhereUniqueInput | CidadeWhereUniqueInput[]
  }

  export type CidadeUncheckedCreateNestedManyWithoutEstadoInput = {
    create?: XOR<CidadeCreateWithoutEstadoInput, CidadeUncheckedCreateWithoutEstadoInput> | CidadeCreateWithoutEstadoInput[] | CidadeUncheckedCreateWithoutEstadoInput[]
    connectOrCreate?: CidadeCreateOrConnectWithoutEstadoInput | CidadeCreateOrConnectWithoutEstadoInput[]
    connect?: CidadeWhereUniqueInput | CidadeWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CidadeUpdateManyWithoutEstadoNestedInput = {
    create?: XOR<CidadeCreateWithoutEstadoInput, CidadeUncheckedCreateWithoutEstadoInput> | CidadeCreateWithoutEstadoInput[] | CidadeUncheckedCreateWithoutEstadoInput[]
    connectOrCreate?: CidadeCreateOrConnectWithoutEstadoInput | CidadeCreateOrConnectWithoutEstadoInput[]
    upsert?: CidadeUpsertWithWhereUniqueWithoutEstadoInput | CidadeUpsertWithWhereUniqueWithoutEstadoInput[]
    set?: CidadeWhereUniqueInput | CidadeWhereUniqueInput[]
    disconnect?: CidadeWhereUniqueInput | CidadeWhereUniqueInput[]
    delete?: CidadeWhereUniqueInput | CidadeWhereUniqueInput[]
    connect?: CidadeWhereUniqueInput | CidadeWhereUniqueInput[]
    update?: CidadeUpdateWithWhereUniqueWithoutEstadoInput | CidadeUpdateWithWhereUniqueWithoutEstadoInput[]
    updateMany?: CidadeUpdateManyWithWhereWithoutEstadoInput | CidadeUpdateManyWithWhereWithoutEstadoInput[]
    deleteMany?: CidadeScalarWhereInput | CidadeScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CidadeUncheckedUpdateManyWithoutEstadoNestedInput = {
    create?: XOR<CidadeCreateWithoutEstadoInput, CidadeUncheckedCreateWithoutEstadoInput> | CidadeCreateWithoutEstadoInput[] | CidadeUncheckedCreateWithoutEstadoInput[]
    connectOrCreate?: CidadeCreateOrConnectWithoutEstadoInput | CidadeCreateOrConnectWithoutEstadoInput[]
    upsert?: CidadeUpsertWithWhereUniqueWithoutEstadoInput | CidadeUpsertWithWhereUniqueWithoutEstadoInput[]
    set?: CidadeWhereUniqueInput | CidadeWhereUniqueInput[]
    disconnect?: CidadeWhereUniqueInput | CidadeWhereUniqueInput[]
    delete?: CidadeWhereUniqueInput | CidadeWhereUniqueInput[]
    connect?: CidadeWhereUniqueInput | CidadeWhereUniqueInput[]
    update?: CidadeUpdateWithWhereUniqueWithoutEstadoInput | CidadeUpdateWithWhereUniqueWithoutEstadoInput[]
    updateMany?: CidadeUpdateManyWithWhereWithoutEstadoInput | CidadeUpdateManyWithWhereWithoutEstadoInput[]
    deleteMany?: CidadeScalarWhereInput | CidadeScalarWhereInput[]
  }

  export type EstadoCreateNestedOneWithoutCidadesInput = {
    create?: XOR<EstadoCreateWithoutCidadesInput, EstadoUncheckedCreateWithoutCidadesInput>
    connectOrCreate?: EstadoCreateOrConnectWithoutCidadesInput
    connect?: EstadoWhereUniqueInput
  }

  export type LocalColetaCreateNestedManyWithoutCidadeInput = {
    create?: XOR<LocalColetaCreateWithoutCidadeInput, LocalColetaUncheckedCreateWithoutCidadeInput> | LocalColetaCreateWithoutCidadeInput[] | LocalColetaUncheckedCreateWithoutCidadeInput[]
    connectOrCreate?: LocalColetaCreateOrConnectWithoutCidadeInput | LocalColetaCreateOrConnectWithoutCidadeInput[]
    connect?: LocalColetaWhereUniqueInput | LocalColetaWhereUniqueInput[]
  }

  export type LocalColetaUncheckedCreateNestedManyWithoutCidadeInput = {
    create?: XOR<LocalColetaCreateWithoutCidadeInput, LocalColetaUncheckedCreateWithoutCidadeInput> | LocalColetaCreateWithoutCidadeInput[] | LocalColetaUncheckedCreateWithoutCidadeInput[]
    connectOrCreate?: LocalColetaCreateOrConnectWithoutCidadeInput | LocalColetaCreateOrConnectWithoutCidadeInput[]
    connect?: LocalColetaWhereUniqueInput | LocalColetaWhereUniqueInput[]
  }

  export type EstadoUpdateOneRequiredWithoutCidadesNestedInput = {
    create?: XOR<EstadoCreateWithoutCidadesInput, EstadoUncheckedCreateWithoutCidadesInput>
    connectOrCreate?: EstadoCreateOrConnectWithoutCidadesInput
    upsert?: EstadoUpsertWithoutCidadesInput
    connect?: EstadoWhereUniqueInput
    update?: XOR<XOR<EstadoUpdateToOneWithWhereWithoutCidadesInput, EstadoUpdateWithoutCidadesInput>, EstadoUncheckedUpdateWithoutCidadesInput>
  }

  export type LocalColetaUpdateManyWithoutCidadeNestedInput = {
    create?: XOR<LocalColetaCreateWithoutCidadeInput, LocalColetaUncheckedCreateWithoutCidadeInput> | LocalColetaCreateWithoutCidadeInput[] | LocalColetaUncheckedCreateWithoutCidadeInput[]
    connectOrCreate?: LocalColetaCreateOrConnectWithoutCidadeInput | LocalColetaCreateOrConnectWithoutCidadeInput[]
    upsert?: LocalColetaUpsertWithWhereUniqueWithoutCidadeInput | LocalColetaUpsertWithWhereUniqueWithoutCidadeInput[]
    set?: LocalColetaWhereUniqueInput | LocalColetaWhereUniqueInput[]
    disconnect?: LocalColetaWhereUniqueInput | LocalColetaWhereUniqueInput[]
    delete?: LocalColetaWhereUniqueInput | LocalColetaWhereUniqueInput[]
    connect?: LocalColetaWhereUniqueInput | LocalColetaWhereUniqueInput[]
    update?: LocalColetaUpdateWithWhereUniqueWithoutCidadeInput | LocalColetaUpdateWithWhereUniqueWithoutCidadeInput[]
    updateMany?: LocalColetaUpdateManyWithWhereWithoutCidadeInput | LocalColetaUpdateManyWithWhereWithoutCidadeInput[]
    deleteMany?: LocalColetaScalarWhereInput | LocalColetaScalarWhereInput[]
  }

  export type LocalColetaUncheckedUpdateManyWithoutCidadeNestedInput = {
    create?: XOR<LocalColetaCreateWithoutCidadeInput, LocalColetaUncheckedCreateWithoutCidadeInput> | LocalColetaCreateWithoutCidadeInput[] | LocalColetaUncheckedCreateWithoutCidadeInput[]
    connectOrCreate?: LocalColetaCreateOrConnectWithoutCidadeInput | LocalColetaCreateOrConnectWithoutCidadeInput[]
    upsert?: LocalColetaUpsertWithWhereUniqueWithoutCidadeInput | LocalColetaUpsertWithWhereUniqueWithoutCidadeInput[]
    set?: LocalColetaWhereUniqueInput | LocalColetaWhereUniqueInput[]
    disconnect?: LocalColetaWhereUniqueInput | LocalColetaWhereUniqueInput[]
    delete?: LocalColetaWhereUniqueInput | LocalColetaWhereUniqueInput[]
    connect?: LocalColetaWhereUniqueInput | LocalColetaWhereUniqueInput[]
    update?: LocalColetaUpdateWithWhereUniqueWithoutCidadeInput | LocalColetaUpdateWithWhereUniqueWithoutCidadeInput[]
    updateMany?: LocalColetaUpdateManyWithWhereWithoutCidadeInput | LocalColetaUpdateManyWithWhereWithoutCidadeInput[]
    deleteMany?: LocalColetaScalarWhereInput | LocalColetaScalarWhereInput[]
  }

  export type CidadeCreateNestedOneWithoutLocais_coletaInput = {
    create?: XOR<CidadeCreateWithoutLocais_coletaInput, CidadeUncheckedCreateWithoutLocais_coletaInput>
    connectOrCreate?: CidadeCreateOrConnectWithoutLocais_coletaInput
    connect?: CidadeWhereUniqueInput
  }

  export type CidadeUpdateOneRequiredWithoutLocais_coletaNestedInput = {
    create?: XOR<CidadeCreateWithoutLocais_coletaInput, CidadeUncheckedCreateWithoutLocais_coletaInput>
    connectOrCreate?: CidadeCreateOrConnectWithoutLocais_coletaInput
    upsert?: CidadeUpsertWithoutLocais_coletaInput
    connect?: CidadeWhereUniqueInput
    update?: XOR<XOR<CidadeUpdateToOneWithWhereWithoutLocais_coletaInput, CidadeUpdateWithoutLocais_coletaInput>, CidadeUncheckedUpdateWithoutLocais_coletaInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type CidadeCreateWithoutEstadoInput = {
    nome: string
    created_at?: Date | string
    updated_at?: Date | string
    locais_coleta?: LocalColetaCreateNestedManyWithoutCidadeInput
  }

  export type CidadeUncheckedCreateWithoutEstadoInput = {
    id?: number
    nome: string
    created_at?: Date | string
    updated_at?: Date | string
    locais_coleta?: LocalColetaUncheckedCreateNestedManyWithoutCidadeInput
  }

  export type CidadeCreateOrConnectWithoutEstadoInput = {
    where: CidadeWhereUniqueInput
    create: XOR<CidadeCreateWithoutEstadoInput, CidadeUncheckedCreateWithoutEstadoInput>
  }

  export type CidadeUpsertWithWhereUniqueWithoutEstadoInput = {
    where: CidadeWhereUniqueInput
    update: XOR<CidadeUpdateWithoutEstadoInput, CidadeUncheckedUpdateWithoutEstadoInput>
    create: XOR<CidadeCreateWithoutEstadoInput, CidadeUncheckedCreateWithoutEstadoInput>
  }

  export type CidadeUpdateWithWhereUniqueWithoutEstadoInput = {
    where: CidadeWhereUniqueInput
    data: XOR<CidadeUpdateWithoutEstadoInput, CidadeUncheckedUpdateWithoutEstadoInput>
  }

  export type CidadeUpdateManyWithWhereWithoutEstadoInput = {
    where: CidadeScalarWhereInput
    data: XOR<CidadeUpdateManyMutationInput, CidadeUncheckedUpdateManyWithoutEstadoInput>
  }

  export type CidadeScalarWhereInput = {
    AND?: CidadeScalarWhereInput | CidadeScalarWhereInput[]
    OR?: CidadeScalarWhereInput[]
    NOT?: CidadeScalarWhereInput | CidadeScalarWhereInput[]
    id?: IntFilter<"Cidade"> | number
    nome?: StringFilter<"Cidade"> | string
    estado_id?: IntFilter<"Cidade"> | number
    created_at?: DateTimeFilter<"Cidade"> | Date | string
    updated_at?: DateTimeFilter<"Cidade"> | Date | string
  }

  export type EstadoCreateWithoutCidadesInput = {
    nome: string
    sigla: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type EstadoUncheckedCreateWithoutCidadesInput = {
    id?: number
    nome: string
    sigla: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type EstadoCreateOrConnectWithoutCidadesInput = {
    where: EstadoWhereUniqueInput
    create: XOR<EstadoCreateWithoutCidadesInput, EstadoUncheckedCreateWithoutCidadesInput>
  }

  export type LocalColetaCreateWithoutCidadeInput = {

  }

  export type LocalColetaUncheckedCreateWithoutCidadeInput = {
    id?: number
  }

  export type LocalColetaCreateOrConnectWithoutCidadeInput = {
    where: LocalColetaWhereUniqueInput
    create: XOR<LocalColetaCreateWithoutCidadeInput, LocalColetaUncheckedCreateWithoutCidadeInput>
  }

  export type EstadoUpsertWithoutCidadesInput = {
    update: XOR<EstadoUpdateWithoutCidadesInput, EstadoUncheckedUpdateWithoutCidadesInput>
    create: XOR<EstadoCreateWithoutCidadesInput, EstadoUncheckedCreateWithoutCidadesInput>
    where?: EstadoWhereInput
  }

  export type EstadoUpdateToOneWithWhereWithoutCidadesInput = {
    where?: EstadoWhereInput
    data: XOR<EstadoUpdateWithoutCidadesInput, EstadoUncheckedUpdateWithoutCidadesInput>
  }

  export type EstadoUpdateWithoutCidadesInput = {
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EstadoUncheckedUpdateWithoutCidadesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocalColetaUpsertWithWhereUniqueWithoutCidadeInput = {
    where: LocalColetaWhereUniqueInput
    update: XOR<LocalColetaUpdateWithoutCidadeInput, LocalColetaUncheckedUpdateWithoutCidadeInput>
    create: XOR<LocalColetaCreateWithoutCidadeInput, LocalColetaUncheckedCreateWithoutCidadeInput>
  }

  export type LocalColetaUpdateWithWhereUniqueWithoutCidadeInput = {
    where: LocalColetaWhereUniqueInput
    data: XOR<LocalColetaUpdateWithoutCidadeInput, LocalColetaUncheckedUpdateWithoutCidadeInput>
  }

  export type LocalColetaUpdateManyWithWhereWithoutCidadeInput = {
    where: LocalColetaScalarWhereInput
    data: XOR<LocalColetaUpdateManyMutationInput, LocalColetaUncheckedUpdateManyWithoutCidadeInput>
  }

  export type LocalColetaScalarWhereInput = {
    AND?: LocalColetaScalarWhereInput | LocalColetaScalarWhereInput[]
    OR?: LocalColetaScalarWhereInput[]
    NOT?: LocalColetaScalarWhereInput | LocalColetaScalarWhereInput[]
    id?: IntFilter<"LocalColeta"> | number
    cidade_id?: IntFilter<"LocalColeta"> | number
  }

  export type CidadeCreateWithoutLocais_coletaInput = {
    nome: string
    created_at?: Date | string
    updated_at?: Date | string
    estado: EstadoCreateNestedOneWithoutCidadesInput
  }

  export type CidadeUncheckedCreateWithoutLocais_coletaInput = {
    id?: number
    nome: string
    estado_id: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CidadeCreateOrConnectWithoutLocais_coletaInput = {
    where: CidadeWhereUniqueInput
    create: XOR<CidadeCreateWithoutLocais_coletaInput, CidadeUncheckedCreateWithoutLocais_coletaInput>
  }

  export type CidadeUpsertWithoutLocais_coletaInput = {
    update: XOR<CidadeUpdateWithoutLocais_coletaInput, CidadeUncheckedUpdateWithoutLocais_coletaInput>
    create: XOR<CidadeCreateWithoutLocais_coletaInput, CidadeUncheckedCreateWithoutLocais_coletaInput>
    where?: CidadeWhereInput
  }

  export type CidadeUpdateToOneWithWhereWithoutLocais_coletaInput = {
    where?: CidadeWhereInput
    data: XOR<CidadeUpdateWithoutLocais_coletaInput, CidadeUncheckedUpdateWithoutLocais_coletaInput>
  }

  export type CidadeUpdateWithoutLocais_coletaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EstadoUpdateOneRequiredWithoutCidadesNestedInput
  }

  export type CidadeUncheckedUpdateWithoutLocais_coletaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    estado_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CidadeUpdateWithoutEstadoInput = {
    nome?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    locais_coleta?: LocalColetaUpdateManyWithoutCidadeNestedInput
  }

  export type CidadeUncheckedUpdateWithoutEstadoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    locais_coleta?: LocalColetaUncheckedUpdateManyWithoutCidadeNestedInput
  }

  export type CidadeUncheckedUpdateManyWithoutEstadoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocalColetaUpdateWithoutCidadeInput = {

  }

  export type LocalColetaUncheckedUpdateWithoutCidadeInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type LocalColetaUncheckedUpdateManyWithoutCidadeInput = {
    id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use EstadoCountOutputTypeDefaultArgs instead
     */
    export type EstadoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EstadoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CidadeCountOutputTypeDefaultArgs instead
     */
    export type CidadeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CidadeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EstadoDefaultArgs instead
     */
    export type EstadoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EstadoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CidadeDefaultArgs instead
     */
    export type CidadeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CidadeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocalColetaDefaultArgs instead
     */
    export type LocalColetaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocalColetaDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}